/**
 * [CS442] Mobile Computing, Spring 2015
 *
 * Server main entry point, etc..
 *
 * @author: DJ Song
 * */


public class ServerMain 
{
	
	/** Just as an example.. */
	public final static int EXAMPLE_RESTROOM_FLOORNUM = 1;
	public final static int EXAMPLE_MALE_RESTROOM_ROOMNUM = 105;
	public final static int EXAMPLE_FEMALE_RESTROOM_ROOMNUM = 108;
	
	public static void main(String[] args) 
	{

		try {
			
			// Load server data before any communication thread gets on. 
			LoadFacilityData();
			
			ClientConnThread ClientConnThreadObj = new ClientConnThread();
			ClientConnThreadObj.start();
			
			// Looks like the process won't be terminated until created threads are done..?
			
			
			// Do some communication to the sensors too..
			
			// Temporary example for now..
			SensorCommThread SensorCommThreadObj = new SensorCommThread();
			SensorCommThreadObj.start();
			
		} catch (Exception e) {
			System.err.println("Exception occurred in main");
		}

	}
	
	/** 
	 * This is suppose to load up all the facility information that the sensor is installed
	 * We just load up some dummy for this semester though.
	 * */
	static void LoadFacilityData()
	{
		// Sample data
		// DataManager can be accessed globally.
		// When you set the relative area information, consider the owner building's bound.
		DataManager.AddARestroom(true, EXAMPLE_RESTROOM_FLOORNUM, EXAMPLE_MALE_RESTROOM_ROOMNUM, 640, 450, 840, 660);
		DataManager.AddARestroom(false, EXAMPLE_RESTROOM_FLOORNUM, EXAMPLE_FEMALE_RESTROOM_ROOMNUM, 1200, 450, 1400, 660);
	}
}





//////////////////////////////////////////////////////////////////////
// Below is a temporary example. 
// You may move it to a separate file for the actual implementation.

/**
 * DeviceCommThread
 * This is just an example of communication to the sensor device.
 * I temporarily put this just to generate a demonstrative data.
 * */
/*class DeviceCommThread extends Thread
{
	
	DeviceCommThread()
	{
		super();
	}

	
	public void run() 
	{
		// Initialize and do some communication to the sensor.

		long CachedPrevTickTime = System.currentTimeMillis();
		long TempExampleUpdateFrequency = 10000; // In millisec.
		
		boolean bLoop = true;
		while(bLoop)
		{		
			//////////////////////////////////////////////////////////////////////
			// Remove this block when the real sensor communication is implemented here.
			
			long CurrTickTime = System.currentTimeMillis();
			
			// Use the abs value because I guess the currentTimeMillis might return reset value at some time..? 
			if( Math.abs(CurrTickTime - CachedPrevTickTime) > TempExampleUpdateFrequency )
			{
				boolean bNewState = !DataManager.GetSingleRestroomItemOccupied(ServerMain.EXAMPLE_RESTROOM_FLOORNUM, ServerMain.EXAMPLE_MALE_RESTROOM_ROOMNUM, 1); 
				// Just for an example, periodically switch the state.
				DataManager.SetSingleRestroomItemOccupied(ServerMain.EXAMPLE_RESTROOM_FLOORNUM, ServerMain.EXAMPLE_MALE_RESTROOM_ROOMNUM, 1, 
						bNewState);
				
				System.out.println("Restroom " + ServerMain.EXAMPLE_RESTROOM_FLOORNUM + " " +  ServerMain.EXAMPLE_MALE_RESTROOM_ROOMNUM
						+ " usage state changed to " + bNewState);
				
				CachedPrevTickTime = CurrTickTime;
			}
			
			//////////////////////////////////////////////////////////////////////
			
			
			
			// When you get the data from the sensor, set the data by calling DataManager.SetSingleRestroomItemOccupied();
			
		}
		
	}
}
*/